AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'

Resources:
  DocumentBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Sub "${AWS::StackName}-${AWS::Region}-${AWS::AccountId}"
  
  DocumentProcessorFunction:
    Type: AWS::Serverless::Function
    Properties:
      PackageType: Image
      Timeout: 900
      MemorySize: 512
      Architectures:
        - x86_64
      Environment:
        Variables:
          s3BucketName: !Sub "${AWS::StackName}-${AWS::Region}-${AWS::AccountId}"
          region: !Ref AWS::Region
          lanceDbTable: doc_table
      Policies:
        - Statement:
            - Effect: Allow
              Action: 
                - 'bedrock:*'
              Resource: '*'
            - Effect: Allow
              Action: 
                - 's3:GetObject'
                - 's3:PutObject'
                - 's3:List*'
              Resource: 
                - !Sub arn:aws:s3:::${AWS::StackName}-${AWS::Region}-${AWS::AccountId}/*
                - !Sub arn:aws:s3:::${AWS::StackName}-${AWS::Region}-${AWS::AccountId}
      Events:
        S3DocumentUpload:
          Type: S3
          Properties:
            Bucket: !Ref DocumentBucket
            Events: s3:ObjectCreated:*
            Filter:
              S3Key:
                Rules:
                  - Name: prefix
                    Value: documents/
    Metadata:      
      DockerContext: ./document-processor
      Dockerfile: Dockerfile.python

  QueryFunction:
    Type: AWS::Serverless::Function
    Properties:
      PackageType: Image
      Timeout: 900
      MemorySize: 512
      Architectures:
        - x86_64
      Environment:
        Variables:
          s3BucketName: !Ref DocumentBucket
          region: !Ref AWS::Region
          lanceDbTable: doc_table
      Policies:
        - Statement:
            - Effect: Allow
              Action: 
                - 'bedrock:*'
              Resource: '*'
            - Effect: Allow
              Action: 
                - 's3:GetObject'
                - 's3:PutObject'
                - 's3:List*'
              Resource: 
                - !Sub arn:aws:s3:::${AWS::StackName}-${AWS::Region}-${AWS::AccountId}/*
                - !Sub arn:aws:s3:::${AWS::StackName}-${AWS::Region}-${AWS::AccountId}
      Metadata:      
        DockerContext: ./query-processor
        Dockerfile: Dockerfile.python
      
  ApiGatewayRestApi:
    Type: 'AWS::Serverless::Api'
    Properties:
      Name: 'QueryFunctionApi'
      StageName: 'prod'

  ApiGatewayResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      ParentId:
        Fn::GetAtt:
          - ApiGatewayRestApi
          - RootResourceId
      PathPart: 'query'
      RestApiId:
        Ref: 'ApiGatewayRestApi'

  ApiGatewayMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      AuthorizationType: 'NONE'
      HttpMethod: 'POST'
      ResourceId:
        Ref: 'ApiGatewayResource'
      RestApiId:
        Ref: 'ApiGatewayRestApi'
      Integration:
        IntegrationHttpMethod: 'POST'
        Type: 'AWS_PROXY'
        Uri: 
          Fn::Sub: 
            - 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations'
            - {
                Region: !Ref AWS::Region,
                LambdaArn: !GetAtt QueryFunction.Arn
              }
      MethodResponses:
        - StatusCode: 200

  LambdaInvokePermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: !GetAtt QueryFunction.Arn
      Action: 'lambda:InvokeFunction'
      Principal: 'apigateway.amazonaws.com'
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayRestApi}/*/*'

Outputs:
  DocumentProcessorFunction:
    Description: "Lambda Function ARN"
    Value: !GetAtt DocumentProcessorFunction.Arn
  DocumentProcessorFunctionIamRole:
    Description: "Implicit IAM Role created for Document Processor function"
    Value: !GetAtt DocumentProcessorFunctionRole.Arn
  DocumentBucketName:
    Description: "S3 bucket where LanceDB sources embeddings"
    Value: !Ref DocumentBucket
  DocumentTableName:
    Description: "Name of the Document Table in LanceDB"
    Value: doc_table
  DeploymentRegion:
    Description: "Region where this stack is deployed"
    Value: !Sub ${AWS::Region}
  QueryFunction:
    Description: "Query Function ARN"
    Value: !GetAtt QueryFunction.Arn
  QueryFunctionIamRole:
    Description: "Implicit IAM Role created for Query function"
    Value: !GetAtt QueryFunctionRole.Arn
